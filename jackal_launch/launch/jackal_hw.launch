<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="ouster" default="False"/>
  <arg name="gps" default="True"/>
  <arg name="rgb" default="True"/>
  <arg name="ir" default="False"/>
  <arg name="event" default="True"/>
  <arg name="calib_path" default="file://."/>

  <include file="$(find jackal_description)/launch/description.launch" />

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <node pkg="jackal_base" type="jackal_node" name="jackal_node">
    <rosparam>
      # TODO: Specify these in code rather than here.
      require:
        publishers:
          - status
          - feedback
          - imu/data_raw
          - navsat/nmea_sentence
        subscribers:
          - cmd_drive
          - wifi_connected
    </rosparam>
    <param name="wireless_interface" value="$(optenv JACKAL_WIRELESS_INTERFACE wlp2s0)" />
  </node>

  <!-- TODO: Eliminate this by compiling the necessary message definitions into jackal_base. -->
  <node pkg="rosserial_python" type="message_info_service.py" name="rosserial_message_info" />

  <!-- Translate Sentence messages from the MCU to NavSatFix messages -->
  <node pkg="nmea_navsat_driver" type="nmea_topic_driver" name="nmea_topic_driver" ns="navsat" />

  <!-- Filter raw gyro data into a usable IMU message -->
  <!--node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter">
    <rosparam file="$(env JACKAL_MAG_CONFIG)" />
    <rosparam>
      gain: 0.1
      zeta: 0.001
      publish_tf: false
      use_magnetic_field_msg: false
    </rosparam>
  </node-->

  <!-- Differential controller and basic localization -->
  <include file="$(find jackal_control)/launch/control.launch" />

  <!-- Teleoperation via joystick and rviz interactive markers -->
  <!--include file="$(find jackal_control)/launch/teleop.launch" /-->
  
  <include file="$(find jackal_teleop)/launch/jackal_teleop.launch">
  </include>

  <!-- Diagnostic Aggregator for robot monitor usage -->
  <!--
  <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator">
    <rosparam command="load" file="$(find jackal_base)/config/diagnostic_analyzers.yaml" />
  </node>
  -->

  <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch"/>

  <group if="$(arg ouster)">
    <!-- Ouster Launch -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="ouster_tf_broadcaster" args="0 0 0 0 0 0 1 base_link ouster/os_sensor" />
    <include file="$(find ouster_decoder)/launch/decoder.launch">
        <arg name="imu_frame" value="ouster/os_imu"/>
        <arg name="lidar_frame" value="ouster/os_lidar"/>
        <arg name="sensor_frame" value="ouster/os_sensor"/>
    </include>
    <include file="$(find ouster_decoder)/launch/driver.launch">
        <arg name="tf_prefix" value="ouster"/>
    </include>
  </group>

  <group if="$(arg rgb)">
      <include file="$(find spinnaker_camera_driver)/launch/camera.launch">
          <arg name="frame_rate" value="20"/>
      </include>
  </group>

  <group if="$(arg ir)">
    <include file="$(find eeyore_ros)/launch/boson.launch"/>
  </group> 

  <group if="$(arg event)">
        <include file="$(find metavision_ros_driver)/launch/driver_nodelet.launch"/>
  </group>

  <group if="$(arg gps)">
    <include file="$(find ublox_gps)/launch/ublox_device.launch">
      <arg name="param_file_name" value="zed_f9p"/>
    </include>
  </group>

</launch>
